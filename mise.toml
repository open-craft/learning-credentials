[tasks.clean]
description = "Remove generated byte code, coverage reports, and build artifacts"
run = '''
find . -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -exec rm -f {} + 2>/dev/null || true
find . -name "*.pyo" -exec rm -f {} + 2>/dev/null || true
find . -name "*~" -exec rm -f {} + 2>/dev/null || true
if command -v coverage >/dev/null 2>&1; then
    coverage erase
fi
rm -rf build/ dist/ *.egg-info htmlcov/
'''

[tasks.coverage]
description = "Generate and view HTML coverage report"
run = '''
pytest --cov-report html
python -m webbrowser file://$(pwd)/htmlcov/index.html
'''

[tasks.requirements]
description = "Install development environment requirements"
run = "uv sync"

[tasks.quality]
description = "Check coding style with ruff and yamllint"
run = "tox -e quality"

[tasks.test]
description = "Run tests in the current virtualenv"
run = "pytest"

[tasks.test-all]
description = "Run all tests using tox"
run = "tox --parallel"

[tasks.diff-cover]
description = "Find diff lines that need test coverage"
depends = ["test"]
run = "diff-cover coverage.xml"

[tasks.validate]
description = "Run tests and quality checks"
depends = ["quality", "pii_check", "test"]

[tasks.upgrade]
description = "Update the lock file with the latest packages"
depends = ["common-constraints"]
run = '''
uv venv --allow-existing
uv lock --upgrade
'''

[tasks.lint]
description = "Format and lint all files with ruff"
run = '''
ruff format
ruff check --fix
'''

[tasks.docs]
description = "Generate Sphinx HTML documentation"
run = '''
tox -e docs
python -m webbrowser file://$(pwd)/docs/_build/html/index.html
'''

[tasks.pii_check]
description = "Check for PII annotations on all Django models"
run = "tox -e pii_check"

[tasks.selfcheck]
description = "Check that the mise file is well-formed"
run = "echo 'The mise file is well-formed.'"

[tasks.extract_translations]
description = "Extract strings to be translated, outputting .mo files"
run = '''
rm -rf docs/_build
cd learning_credentials && ../manage.py makemessages -l en -v1 -d django
cd learning_credentials && ../manage.py makemessages -l en -v1 -d djangojs
'''

[tasks.compile_translations]
description = "Compile translation files, outputting .po files for each supported language"
run = "cd learning_credentials && ../manage.py compilemessages"

[tasks.pull_translations]
description = "Pull translations from Transifex"
run = "tx pull -af -t --mode reviewed"

[tasks.push_translations]
description = "Push source translation files (.po) from Transifex"
run = "tx push -s"

[tasks.dummy_translations]
description = "Generate dummy translation (.po) files"
run = "cd learning_credentials && i18n_tool dummy"

[tasks.build_dummy_translations]
description = "Generate and compile dummy translation files"
depends = ["extract_translations", "dummy_translations", "compile_translations"]

[tasks.validate_translations]
description = "Validate translations"
depends = ["build_dummy_translations"]
run = "cd learning_credentials && i18n_tool changed"

[tasks.common-constraints]
description = "Download and process common constraints from edx-lint"
run = '''
CONSTRAINTS_URL="https://raw.githubusercontent.com/edx/edx-lint/master/edx_lint/files/common_constraints.txt"
echo "Downloading and processing constraints from $CONSTRAINTS_URL..."
CONSTRAINTS=$(curl -s "$CONSTRAINTS_URL")
echo "Processing constraints..."
CONSTRAINTS="$CONSTRAINTS" python3 -c "
import os
import re
import tomllib

dev_marker = '# External dev constraints (DO NOT REMOVE THIS LINE)'
main_marker = '# External constraints (DO NOT REMOVE THIS LINE)'

# Read the downloaded constraints from environment variable.
constraints_content = os.environ.get('CONSTRAINTS', '')
if not constraints_content:
    print('No constraints data available')
    exit(1)

# Use dev constraints for dependencies that can be modified by tests.
dev_constraints = []
global_constraints = []

# Filter and process constraints.
for line in constraints_content.splitlines():
    line = line.strip()
    if line and not line.startswith('#'):
        if line.startswith('Django'):
            dev_constraints.append(line)
        else:
            global_constraints.append(line)

print('Updating pyproject.toml...')

# Read as text to preserve formatting and comments.
with open('pyproject.toml', 'r') as f:
    content = f.read()

def update_constraints_section(content: str, marker: str, constraints: list[str]) -> str:
    if not constraints:
        return content

    # Find the marker line and replace until the closing bracket.
    result_lines = []
    in_section = False
    for line in content.split('\n'):
        if marker in line:
            result_lines.append(line)
            # Add constraints.
            for constraint in constraints:
                result_lines.append(f'    \"{constraint}\",')
            in_section = True
        elif in_section and line.strip() == ']':
            in_section = False
            result_lines.append(line)
        elif not in_section:
            result_lines.append(line)

    return '\n'.join(result_lines)

# Update both sections.
content = update_constraints_section(content, dev_marker, dev_constraints)
content = update_constraints_section(content, main_marker, global_constraints)

# Write the updated file.
with open('pyproject.toml', 'w') as f:
    f.write(content)

# Validate the updated file can still be parsed.
try:
    with open('pyproject.toml', 'rb') as f:
        tomllib.load(f)
    print('Constraints updated successfully and TOML is valid.')
except tomllib.TOMLDecodeError as e:
    print(f'Error: Updated TOML file is invalid: {e}')
    exit(1)
"
'''
