.PHONY: clean compile_translations coverage diff_cover docs dummy_translations \
        extract_translations fake_translations help pii_check pull_translations push_translations \
        quality requirements selfcheck test test-all upgrade validate install_transifex_client

.DEFAULT_GOAL := help

# For opening files in a browser. Use like: $(BROWSER)relative/path/to/file.html
BROWSER := python -m webbrowser file://$(CURDIR)/

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@awk -F ':.*?## ' '/^[a-zA-Z]/ && NF==2 {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

coverage: clean ## generate and view HTML coverage report
	pytest --cov-report html
	$(BROWSER)htmlcov/index.html

docs: ## generate Sphinx HTML documentation, including API docs
	tox -e docs
	$(BROWSER)docs/_build/html/index.html

CONSTRAINTS_URL = https://raw.githubusercontent.com/edx/edx-lint/master/edx_lint/files/common_constraints.txt
MARKER = External constraints (DO NOT REMOVE THIS LINE)

common-constraints: ## download and process common constraints from a URL
	@echo "Downloading and processing constraints from $(CONSTRAINTS_URL)..."
	@CONSTRAINTS=$$(curl -s $(CONSTRAINTS_URL)); \
	if [ -z "$$CONSTRAINTS" ]; then \
		echo "Warning: No constraints downloaded or URL not accessible"; \
		exit 0; \
	fi; \
	\
	echo "Processing constraints..."; \
	PROCESSED=$$(echo "$$CONSTRAINTS" | \
		grep -E '^[^#[:space:]]' | \
		sed -e 's/^/    "/' -e 's/$$/"/' | \
		sed '$$!s/$$/,/'); \
	\
	echo "Updating pyproject.toml..."; \
	awk -i inplace -v constraints="$$PROCESSED" -v marker="$(MARKER)" ' \
		{ \
		    if (index($$0, marker)) { \
			    print; \
			    print constraints; \
			    in_block=1; \
			    next; \
		    } \
		    if (in_block && /\]/) { \
			    in_block=0; \
			    print; \
			    next; \
		    } \
		    if (!in_block) { \
			    print; \
		    } \
		}' pyproject.toml && \
	echo "Constraints updated successfully."

upgrade: common-constraints ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	uv venv --allow-existing
	uv lock --upgrade

quality: ## check coding style with pycodestyle and pylint
	tox -e quality

pii_check: ## check for PII annotations on all Django models
	tox -e pii_check

requirements: ## install development environment requirements
	uv sync

lint: ## lint all files
	black .
	yamllint .

test: clean ## run tests in the current virtualenv
	pytest

diff_cover: test ## find diff lines that need test coverage
	diff-cover coverage.xml

test-all: ## run all tests
	tox --parallel

validate: quality pii_check test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."

## Localization targets

extract_translations: ## extract strings to be translated, outputting .mo files
	rm -rf docs/_build
	cd learning_credentials && ../manage.py makemessages -l en -v1 -d django
	cd learning_credentials && ../manage.py makemessages -l en -v1 -d djangojs

compile_translations: ## compile translation files, outputting .po files for each supported language
	cd learning_credentials && ../manage.py compilemessages

detect_changed_source_translations:
	cd learning_credentials && i18n_tool changed

pull_translations: ## pull translations from Transifex
	tx pull -af -t --mode reviewed

push_translations: ## push source translation files (.po) from Transifex
	tx push -s

dummy_translations: ## generate dummy translation (.po) files
	cd learning_credentials && i18n_tool dummy

build_dummy_translations: extract_translations dummy_translations compile_translations ## generate and compile dummy translation files

validate_translations: build_dummy_translations detect_changed_source_translations ## validate translations

install_transifex_client: ## Install the Transifex client
	# Instaling client will skip CHANGELOG and LICENSE files from git changes
	# so remind the user to commit the change first before installing client.
	git diff -s --exit-code HEAD || { echo "Please commit changes first."; exit 1; }
	curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash
	git checkout -- LICENSE README.md ## overwritten by Transifex installer
