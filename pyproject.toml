[project]
name = "learning-credentials"
version = "0.2.2"
description = "A pluggable service for preparing Open edX credentials."
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.11"
license = "AGPL-3.0-only"
license-files = ["LICENSE.txt"]
authors = [{name = "OpenCraft", email = "help@opencraft.com"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["Python", "edx"]
dependencies = [
    "django",  # Web application framework
    "django-model-utils",  # Provides TimeStampedModel abstract base class
    "edx-opaque-keys",  # Create and introspect Course and XBlock identities
    "celery",  # Distributed task queue
    "django-celery-beat",  # Periodic task scheduler
    "django_reverse_admin",  # Provides reverse inlines in the admin interface
    "djangorestframework",  # RESTful API framework
    "django-object-actions",  # Provides actions on objects in the admin interface
    # TODO: Extract these to a plugin.
    "pypdf",  # PDF manipulation library
    "reportlab",  # PDF generation library
    "openedx-completion-aggregator",  # Completion aggregation service
    "edx_ace",  # Messaging library
    "learning-paths-plugin>=0.3.4-rc6",
]

[project.urls]
Homepage = "https://github.com/open-craft/learning-credentials"

[project.entry-points."lms.djangoapp"]
learning_credentials = "learning_credentials.apps:LearningCredentialsConfig"
openedx_certificates = "openedx_certificates.apps:OpenEdxCertificatesConfig"

[tool.setuptools.packages.find]
include = ["learning_credentials", "learning_credentials.*", "openedx_certificates", "openedx_certificates.*"]
exclude = ["*tests"]

[dependency-groups]
test = [
    "pytest-cov",                # pytest extension for code coverage statistics
    "django-coverage-plugin",    # django_coverage_plugin
    "pytest-django",             # pytest extension for better Django support
    "code-annotations",          # provides commands used by the pii_check make target
    "dj-inmemorystorage",        # provides an in-memory storage backend for Django
    "factory-boy",               # provides a fixtures replacement for pytest
]
ci = [
    "tox",                       # Virtualenv management for tests
    "tox-uv",                    # Replace pip with uv in tox
]
docs = [
    "doc8",                      # reStructuredText style checker
    "sphinx-book-theme",         # Common theme for all Open edX projects
    "twine",                     # Validates README.rst for usage on PyPI
    "build",                     # Needed to build the wheel for twine check
    "Sphinx",                    # Documentation builder
]
quality = [
    "black",                     # Code formatter
    "ruff",                      # Linter
    "yamllint",                  # A linter for YAML files
]
dev = [
    {include-group = "test"},
    {include-group = "ci"},
    {include-group = "docs"},
    {include-group = "quality"},
    "diff-cover",                # Changeset diff test coverage
    "edx-i18n-tools",            # For i18n_tool dummy
]

[tool.uv]
constraint-dependencies = [
    # External constraints (DO NOT REMOVE THIS LINE)
    "Django<5.0",
    "elasticsearch<7.14.0",
    "django-simple-history==3.0.0",
    "pip<24.3",
    "urllib3<2.3.0"
]

[tool.coverage.run]
include = ['learning_credentials/**']
omit = ['*/migrations/*', 'tests/*']
plugins = ['django_coverage_plugin']

[tool.ruff]
line-length = 120
exclude = ['migrations', 'docs', 'manage.py']
target-version = 'py311'

[tool.ruff.lint]
select = [
    'F',    # Pyflakes
    'E',    # Pycodestyle (errors)
    'W',    # Pycodestyle (warnings)
    'C90',  # mccabe
    'I',    # isort
    'N',    # pep8-naming
    'D',    # pydocstyle
    'UP',   # pyupgrade
    'YTT',  # flake8-2020
    'ANN',  # flake8-annotations
    'ASYNC',# flake8-async
    'S',    # flake8-bandit
    'BLE',  # flake8-blind-except
    'FBT',  # flake8-boolean-trap
    'B',    # flake8-bugbear
    'A',    # flake8-builtins
    'COM',  # flake8-commas
    'C4',   # flake8-comprehensions
    'DTZ',  # flake8-datetimez
    'T10',  # flake8-debugger
    'DJ',   # flake8-django
    'EM',   # flake8-errmsg
    'EXE',  # flake8-executable
    'FA',   # flake8-future-annotations
    'ISC',  # flake8-implicit-str-concat
    'ICN',  # flake8-import-conventions
    'LOG',  # flake8-logging
    'G',    # flake8-logging-format
    'INP',  # flake8-no-pep420
    'PIE',  # flake8-pie
    'T20',  # flake8-print
    'PYI',  # flake8-pyi
    'PT',   # flake8-pytest-style
    'Q',    # flake8-quotes
    'RSE',  # flake8-raise
    'RET',  # flake8-return
    'SLF',  # flake8-self
    'SLOT', # flake8-slots
    'SIM',  # flake8-simplify
    'TID',  # flake8-tidy-imports
    'TC',   # flake8-type-checking
    'INT',  # flake8-gettext
    'ARG',  # flake8-unused-arguments
    'PTH',  # flake8-use-pathlib
    'TD',   # flake8-todos
    'ERA',  # eradicate
    'PD',   # pandas-vet
    'PGH',  # pygrep-hooks
    'PL',   # Pylint
    'TRY',  # tryceratops
    'FLY',  # flynt
    'NPY',  # NumPy-specific rules
    'AIR',  # Airflow
    'PERF', # Perflint
    'FURB', # refurb
    # TODO: Enable preview.
    # 'DOC',  # pydoclint
    'RUF',  # Ruff-specific rules
]
ignore = [
    'ANN002', # missing-type-args
    'ANN003', # missing-type-kwargs
    'ANN204', # missing-return-type-special-method
    'D203',   # one-blank-line-before-class
    'D212',   # multi-line-summary-first-line (incompatible with D213)
    'Q000',   # bad-quotes-inline-string
    'TD002',  # missing-t\odo-author
    'TD003',  # missing-t\odo-link
    'TRY003', # raise-vanilla-args
]

[tool.ruff.lint.per-file-ignores]
'tests/*' = [
    'S101',   # assert
    'INP001', # implicit-namespace-package
    'SLF001', # private-member-access
    'RUF018', # assignment-in-assert
]

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-magic-value-types = ['int', 'str']

[tool.black]
line-length = 120
target-version = ['py311']
skip_string_normalization = true
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.pytest.ini_options]
filterwarnings = [
    # https://github.com/openedx/completion/pull/259
    "ignore:'index_together' is deprecated:django.utils.deprecation.RemovedInDjango51Warning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace.*sphinxcontrib:DeprecationWarning",
    "ignore:'cgi' is deprecated:DeprecationWarning",
]
DJANGO_SETTINGS_MODULE = "test_settings"
addopts = "--cov learning_credentials --cov tests --cov-report term-missing --cov-report xml"
norecursedirs = ".* docs requirements site-packages"
